---
area: contrib
section: modules
title: troopjs-require
---

> TroopJS uses requirejs for AMD. Below is a list of [troopjs-require](https://github.com/troopjs/troopjs-require) modules that will 
> provide you with several requirejs [plugins](http://requirejs.org/docs/plugins.html) to expand your options for 
> loading various types of resources.

NOTE: Some plugins work by loading JavaScript source via ajax, so be aware that they are constrained by same-origin-policy.

## Load JSON

The `troopjs-requirejs/json` plugin allows you to select arbitrary properties from a loaded JSON file. Below is a `troopjs/version` module as an example: 

```js
define("troopjs/version", [ "json!./bower.json#version" ], function (version) {
  return version;
});
```

## AMDifying your module

The `troopjs-requirejs/shadow` plugin allows you to wrap any non-AMD module with dependency variables and `exports` that you've specified- 

Below are some sample methods on how you can use the `troopjs-requirejs/shadow` plugin: 

#Sample method 1 

AMDifying a bootstrap tooltip module from `bootstrap.tooltip` via dependency on the exports of
the `jquery` module which is already AMD.

```js
require(["shadow!bootstrap.tooltip#jQuery=jquery"], function(Tooltip){});
```

#Sample method 2

AMDifying backbone.js via dependency on `jquery` and exports from  `Backbone` variable.

```js
require(["shadow!backbone#jQuery=jquery&exports=Backbone"], function(Backbone){});
```

## Load multiple versions of TroopJS

RequireJS supports the [context](http://requirejs.org/docs/1.0/docs/api.html#multiversion) feature which allows
you to run two different "generations" of module versions on the same page. Some TroopJS applications utilize the feature to bridge two versions
of TroopJS (like a wormhole) that are considered incompatible.
Through the use of `troopjs-requirejs/multiversion`
plugin, you are able to allow one module to be required from within a different context and eventually reference it.

```js
require(["troopjs-opt/pubsub/proxy/to1x", "mv!troopjs-core/pubsub/hub#troopjs-1.0"], function (HubProxy, v1Hub) {
  HubProxy({
    "hub" : v1Hub,
    "publish" : {
      "authenticate" : "login",
    },
    "subscribe" : {
      "news" : "feeds"
    }
  });
});
```
The above example maps hub messages from TroopJS 1.x version to new names in TroopJS 3.x, loading `troopjs-core/pubsub/hub`
from the "1.x" context.
