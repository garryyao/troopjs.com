---
area: contrib
section: development
title: TroopJS Bundle
---

> The TroopJS bundle is the deck that bears all modules
> that serves various aspects of development tasks-- from creating release files to generating API docs.

Unlike many other singular libraries, TroopJS is a framework that consists of small, dedicated modules that work side-by-side, with certain dependencies with each other. The bundle repository has no actual functional module in it. 
It's there to glue a selected group of modules together for development and release purpose. For this particular reason, setting up the bundle is required for TroopJS development.

## Setting up the bundle

Clone the bundle [repository](https://github.com/troopjs/troopjs):

```shell
git clone https://github.com/troopjs/troopjs
cd troopjs
```
To install the list of default modules from bower:

```shell
bower install
```

NOTE: Only core modules will be included by default. 

Modules should now reside in the `bower_components` directory, this install will also include third party libraries that individual modules rely on.

## Build with Grunt

TroopJS uses [grunt](http://gruntjs.com) for its build system. Make sure grunt and all grunt task plugins are installed via NPM.

```shell
npm install
```
Below is a list of the most commonly used tasks with their descriptions:

 * compile - The compile task takes different profiles (`maxi` and `mini`) that define lists of included modules to trace its module dependencies, eventually putting together the bundled script with all modules by requirejs [optimizer](http://requirejs.org/docs/optimization.html). The uncompressed result bundle will be created in the `dist` directory.

 * test - The test task is used to run every module's tests using the buster runner backed by phantomJS. Tests are executed from the command
line using a head-less browser. The task fails if any of the tests fails, in which case, it then logs a rest report on the standard output. 

 * release - The release task is used to perform TroopJS releases from the current branch. This will create a TroopJS bundle from the above `compile`
task, compress it and then, push the `dist` directory content to an orphan release branch corresponding to the current version. 

 * docs - The docs task generates and assembles JSDuck API documentation for TroopJS modules. 

 * version - The version task manages TroopJS versioning with Git tag in [semver](http://http://semver.org/) compliant format.

 * eslint - The eslint task lints all TroopJS sources using eslint(http://eslint.org/) rules.

NOTE: To see a full list of grunt tasks available, use `grunt --help`. 

## Test with Buster.JS

TroopJS tests are written in [Buster.JS](http://docs.busterjs.org/). All tests can be executed through any of the following ways:

 - opening a web page using any static browser runner that runs tests in a browser
 - directly through a command line using a headless browser like phantomJS
 - simultaneously running tests on all captured browsers

NOTE: Out of the methods above, we are inclined to recommend executing the tests using phantomJS as it's available as a grunt task (`test`). Furthermore, it proves to be the simplest way of verifying that all tests are green.  

Running the buster command below will install phantomJS (if it is your first time to do so). Installation might take a while. Patience is a virtue. 

```shell
grunt test
```

Executing specific tests statically in one browser is handy for debugging and trouble shooting test failures. Do so by launching `buster-static`
and pointing your browser to the printed runner URL.

```shell
buster-static
Starting server on http://localhost:8282/
```

You may also specify a glob pattern that will allow you to execute a specific test within a filtered module. 

Below is a sample that illustrates how a specific test is run on a filtered module (`troopjs-core`).

```shell
buster-static -t "/Users/garry/workspace/troopjs/bower_components/troopjs-core/test/**/*.js"
```

To run tests simultaneously on captured browsers, you may launch `buster-server`. Open the runner page with browser of choice and click "capture".

```shell
buster-server
buster-server running on http://localhost:1111
```

You may also run tests using a command line like so with a static runner: 

```shell
buster-static -t "./bower_components/troopjs-core/test/**/*.js"
```

NOTE: If you want to add more tests, please follow these guidelines: 

- All tests are located in the `test` directory of each module. Each component
has a corresponding test suite file of its own. Use the suffix `-test` when you name files (example: the test file for `troopjs-browser/component/widget` is named `troopjs-browser/test/component/widget-test`).

If your tests are dependent on script/s, the script/s have to appear inside the `libs` or `resources` section of `test/buster.js` of [buster configuration](http://docs.busterjs.org/en/latest/modules/buster-configuration/)
so as to make them available at runtime.

We also suggest that you check individual module source for more details of how TroopJS buster test cases look like.

## Aggregate modules

The modules `maxi.js` and `mini.js` are aggregate modules used by the requirejs [optimizer](http://requirejs.org/docs/optimization.html). TroopJS bundles will be created together with a `troopjs/version` module which indicates the version of TroopJS.

If you're not satisfied with our aggregate modules, you can easily create your own bundle by modifying
one of the existing aggregate modules or just create a new one. For example, we can redefine how the `maxi` bundle look like by
removing some unused modules from `troopjs-data`, and adding some interesting modules from the `troopjs-contrib-browser` package.

```js
define([
	"./mini",
	"troopjs-opt/route/gadget",
	"troopjs-dom/hash/widget",
	"troopjs-dom/loom/plugin",
	"troopjs-contrib-browser/mvc/controller/widget",
	"troopjs-contrib-browser/data/widget",
	"troopjs-contrib-browser/cache/widget"
], function (mini) {
	return mini;
});
```

Before building the bundle, we need to make sure the new `troopjs-contrib-browser` package is installed locally.

```
bower install troopjs-contrib-browser --save-dev
```

Then, build your bundle with `grunt compile` and you should be able to check the updated list of bundled modules in the `dist/build.txt` file.
