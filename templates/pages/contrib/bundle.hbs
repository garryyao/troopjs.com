---
area: contrib
section: development
title: TroopJS Bundle
---

> The TroopJS bundle is the deck that bears all modules
> that serves various aspects of development tasks-- from creating release files to generating API docs.

Unlike many other singular libraries, TroopJS is a framework that consists of small, dedicated modules that work side-by-side, with certain dependencies with each other. The bundle repository has no actual functional module in it. 
It's there to glue a selected group of modules together for development and release purpose. For this particular reason, setting up the bundle is required for TroopJS development.

## Setting up the bundle

Clone the bundle [repository](https://github.com/troopjs/troopjs):

```shell
git clone https://github.com/troopjs/troopjs
cd troopjs
```
To install the list of default modules from bower:

```shell
bower install
```

NOTE: Only core modules will be included by default. 

Modules should now reside in the `bower_components` directory, this install will also include third party libraries that individual modules rely on.

## Build with Grunt

TroopJS uses [grunt](http://gruntjs.com) for its build system. Make sure grunt and all grunt task plugins are installed via NPM.

```shell
npm install
```
Below is a list of the most commonly used tasks with its description:

 * compile - The compile task takes different profiles defined in the list (`maxi` and `mini`) of included modules to trace its module dependencies, eventually putting together the bundled script with all modules by requirejs [optimizer](http://requirejs.org/docs/optimization.html). The uncompressed results bundle will be created in `dist` directory.

 * test - The test task is used to run every module's tests using the buster runner backed by phantomJS. Tests are run using a command
line in the head-less browser. The task fails in case any of the tests fails. In which case, it then logs a rest report on the standard output. 

 * release - The release task is used to perform TroopJS releases from the current branch. This will create a TroopJS bundle from the above `compile`
task, compress it and then, push the `dist` directory content to an orphan release branch corresponding to the current version. 

 * docs - The docs task generates and assembles JSDuck API documentation for all modules found in the `bower_components` directory. 

 * version - The version task manages TroopJS versioning with Git tag in [semver](http://http://semver.org/) compliant format.

 * eslint - The eslint task lints all modules sources found within the `bower_components` directory using eslint(http://eslint.org/) rules.

NOTE: To see a full list of grunt tasks available, use `grunt --help`. 

## Test with Buster.JS

TroopJS tests are written and run in [Buster.JS](http://docs.busterjs.org/). All tests can be run through any of the following ways:

 - opening web page with either static browser runner that runs tests in a browser
 - directly through command line with headless browser like phantomJS
 - simultaneously run tests on all the captured browsers

Run tests with phantomJS is the simpliest way of verying all tests are green, which is available as grunt task `test`,
if it's your first time of running this command buster and phantomJS will be installed which will take a while.

```shell
grunt test
```

Run only specific tests statically in one browser is handy for debugging and trouble shoot test failures, launch `buster-static`
and point your browser to printed runner URL.

```shell
buster-static
Starting server on http://localhost:8282/
```

You can also specify glob pattern that filters down the tests further and to run only those tests, e.g. the following
is to run only tests from `troopjs-core` module.

```shell
buster-static -t "/Users/garry/workspace/troopjs/bower_components/troopjs-core/test/**/*.js"
```

To run tests simutaneously with captured browsers you should instead launch `buster-server`, open the runner page with
your concerned browsers and click for "capture".

```shell
buster-server
buster-server running on http://localhost:1111
```

Then you can run tests from command line like the above with static runner.

```shell
buster-static -t "/Users/garry/workspace/troopjs/bower_components/troopjs-core/test/**/*.js"
```

When adding more tests be aware that all tests shall be within the `test` directory for each module, each subjected component
shall has a corresponding test suite file of it's own, filename must be suffixed by `-test`, for instance the test suite file
for `troopjs-browser/component/widget` would be `troopjs-browser/test/component/widget-test`.

If in your tests other dependent scripts are to be required, they have to appear inside the `libs` or `resources`
section of `test/buster.js` of [buster configuration](http://docs.busterjs.org/en/latest/modules/buster-configuration/)
to make them available at runtime.

You may want to check individual module source for more details of how does TroopJS buster test case looks like.

## Build profile

Bundle profiles currently `maxi.js` and `mini.js` are preset list of modules to be included in a requirejs
[optimizer](http://requirejs.org/docs/optimization.html) run, all troopjs modules but not external ones will be bundled
as a whole, with an extra `troopjs/version` module which indicates exact version of troopjs.

If you're not satisfied with our preset list of modules in bundle, you can easily build you own bundle by modifying
one of the existing bundle profile then just to rebuild, to examplify we redefine how the `maxi` bundle looks like by
removing some unused modules from `troopjs-data`, and add some interested widgets from the `troopjs-contrib-browser` package.

```js
define([
	"./mini",
	"troopjs-opt/route/gadget",
	"troopjs-dom/hash/widget",
	"troopjs-dom/loom/plugin",
	"troopjs-contrib-browser/mvc/controller/widget",
	"troopjs-contrib-browser/data/widget",
	"troopjs-contrib-browser/cache/widget"
], function (mini) {
	return mini;
});
```

Before rebuild the bundle, we need to make sure the new `troopjs-contrib-browser` package is properly installed locally.

```
bower install troopjs-contrib-browser --save-dev
```

Then to rebuild you bundle with `grunt compile` and we should be able to check the updated list of bundled modules in `dist/build.txt` file.
